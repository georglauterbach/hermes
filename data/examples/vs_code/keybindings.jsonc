// ------------------------------------------------------------------
// # User-Configured Keybindings
//
// Ctrl       => peek / show
// Ctrl+Shift => go to
//
// ## Keys
//
// [BracketLeft] = ü
// [Semicolon]   = ö
// [Quote]       = ä
// [Equal]       = `
// [Backslash]   = #
// ------------------------------------------------------------------
[
    // ! ------------------------------------------------------------
    // ! IDE
    // ! ------------------------------------------------------------
    // ? IDE::SETTINGS
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+shift+[Comma]",
        "command": "workbench.action.openSettingsJson"
    },
    // ! ------------------------------------------------------------
    // ! CODE
    // ! ------------------------------------------------------------
    // ? CODE::SHOW HOVER
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+[BracketLeft]",
        "command": "editor.action.showHover",
        "when": "editorHasHoverProvider && editorTextFocus"
    },
    // ? CODE::REFERENCES
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // peek
        "key": "ctrl+shift+[BracketLeft]",
        "command": "editor.action.referenceSearch.trigger",
        "when": "editorHasReferenceProvider && editorTextFocus"
    },
    // ? CODE::GO BACK
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+alt+-",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    // ? CODE::DEFINITIONS
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // peek
        "key": "ctrl+[Quote]",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    {
        // go to
        "key": "ctrl+shift+[Quote]",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    // ? CODE::TYPE DEFINITIONS
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // go to
        "key": "ctrl+alt+[Quote]",
        "command": "editor.action.peekTypeDefinition",
        "when": "editorHasTypeDefinitionProvider && editorTextFocus"
    },
    {
        // go to
        "key": "ctrl+shift+alt+[Quote]",
        "command": "editor.action.goToTypeDefinition",
        "when": "editorHasTypeDefinitionProvider && editorTextFocus"
    },
    // ? CODE::DECLARATIONS
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // peek
        "key": "ctrl+[Backslash]",
        "command": "editor.action.peekDeclaration",
        "when": "editorHasDeclarationProvider && editorTextFocus"
    },
    {
        // go to
        "key": "ctrl+shift+[Backslash]",
        "command": "editor.action.goToDeclaration",
        "when": "editorHasDeclarationProvider && editorTextFocus"
    },
    // ? CODE::IMPLEMENTATIONS
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // go to
        "key": "ctrl+[Semicolon]",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        // go to
        "key": "ctrl+shift+[Semicolon]",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    // ? CODE::FORMAT
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+shift+i",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    // ? CODE::RENAME
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // rename symbol
        "key": "ctrl+k ctrl+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    //   ------------------------------------------------------------
    {
        // -default(rename symbol)
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    // ! ------------------------------------------------------------
    // ! NAVIGATION
    // ! ------------------------------------------------------------
    // ? NAVIGATION::MULTI CURSOR
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        // multi-cursor up
        "key": "ctrl+shift+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        // multi-cursor down
        "key": "ctrl+shift+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    // ? NAVIGATION::SEARCH::QUICK TEXT
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+alt+space",
        "command": "workbench.action.quickTextSearch"
    },
    //   ------------------------------------------------------------
    {
        "key": "ctrl+alt+space",
        "command": "-toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    // ? NAVIGATION::SEARCH::FILES
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen"
    },
    //   ------------------------------------------------------------
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    // ? NAVIGATION::TASK RUNNER
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+shift+alt+p",
        "command": "workbench.action.tasks.runTask"
    },
    // ? NAVIGATION::FILE EXPLORER::CREATE NEW FILE
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+alt+n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus"
    },
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+shift+alt+n",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus"
    },
    // ! ------------------------------------------------------------
    // ! TERMINAL
    // ! ------------------------------------------------------------
    // ? TERMINAL::CREATE AND SHOW
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+shift+[Equal]",
        "command": "workbench.action.terminal.new"
    },
    {
        // -default(show terminal pane)
        "key": "ctrl+shift+[Equal]",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    // ? TERMINAL::SHOW AND HIDE
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+[Equal]",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    //   ------------------------------------------------------------
    {
        "key": "ctrl+[Equal]",
        "command": "-markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    // ? TERMINAL::MAXIMISE
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+alt+[Equal]",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    // ? TERMINAL::KILL
    //   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    // ! ------------------------------------------------------------
    // ! REMOVED
    // ! ------------------------------------------------------------
    // ? REMOVED::COPILOT BS
    //   ------------------------------------------------------------
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.chat.applyInEditor",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.chat.insertCodeBlock",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-chatEditor.action.accept",
        "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress"
    }
]
